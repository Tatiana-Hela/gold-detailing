{"mappings":"C,A,WCCA,IAAM,EAAW,SAAS,gBAAA,CAAiB,uBAQ3C,SAAS,EAAa,CAAK,EAEzB,IAAM,EAAiB,IAAI,CAAC,YAAA,CAAa,QAAQ,UAAA,CAAW,KAG5D,GAAI,EAAgB,CAClB,EAAM,cAAN,GAEA,IAAM,EAAW,IAAI,CAAC,YAAA,CAAa,QAC7B,EAAgB,SAAS,aAAA,CAAc,GAE7C,GAAI,EAAe,CACjB,IAAM,EAAiB,EAAc,qBAAA,GAAwB,GAAA,CACvD,EAAgB,OAAO,WAAA,CACvB,EAAW,EAAiB,EAG9B,EAAiB,KA0BrB,sBAvBA,SAAS,EAAU,CAAS,MAeJ,EAdjB,GAAgB,CAAA,EAAiB,CAAtC,EACA,IAAM,EAAW,EAAY,EAE7B,OAAO,QAAA,CACL,EAYF,AAAI,AADJ,CAAA,EAViB,EAUZ,GAAI,EACD,EAAW,AAXuB,EAWnB,EAAK,EAAI,EAAI,EAXT,EAanB,AAbkC,EAa9B,EAAM,CAAA,AADlB,CAAA,GAAK,CAAA,EACiB,EAAI,EAAI,CAAA,EAbH,GAGvB,EAbW,KAcb,sBAAsB,EAE1B,EAYF,CACF,CACF,CAnDA,EAAS,OAAA,CAAQ,AAAA,IACf,EAAK,gBAAA,CAAiB,QAAS,EACjC,E","sources":["<anon>","src/js/scroll.js"],"sourcesContent":["(function () {\nvar $dd9e54e108f59881$exports = {};\n// Получаем все ссылки внутри навигации\nconst $dd9e54e108f59881$var$navLinks = document.querySelectorAll(\".nav-menu-list-link\");\n// Добавляем обработчик события для каждой ссылки\n$dd9e54e108f59881$var$navLinks.forEach((link)=>{\n    link.addEventListener(\"click\", $dd9e54e108f59881$var$smoothScroll);\n});\n// Функция для плавного скролла к секции\nfunction $dd9e54e108f59881$var$smoothScroll(event) {\n    // Проверяем, является ли ссылка внутренней (якорь на текущую страницу)\n    const isInternalLink = this.getAttribute(\"href\").startsWith(\"#\");\n    // Если ссылка внутренняя, отменяем стандартное поведение ссылки и выполняем плавную прокрутку\n    if (isInternalLink) {\n        event.preventDefault();\n        const targetId = this.getAttribute(\"href\"); // Получаем атрибут href ссылки (например, \"#about\")\n        const targetSection = document.querySelector(targetId); // Получаем элемент секции по id\n        if (targetSection) {\n            const targetPosition = targetSection.getBoundingClientRect().top; // Получаем позицию секции относительно вьюпорта\n            const startPosition = window.pageYOffset; // Текущая позиция скролла\n            const distance = targetPosition - startPosition; // Расстояние, которое нужно прокрутить\n            const duration = 1000; // Время анимации в миллисекундах\n            let startTimestamp = null;\n            // Функция анимации прокрутки\n            function animation(timestamp) {\n                if (!startTimestamp) startTimestamp = timestamp;\n                const progress = timestamp - startTimestamp;\n                window.scrollTo(0, easeInOutCubic(progress, startPosition, distance, duration));\n                if (progress < duration) requestAnimationFrame(animation);\n            }\n            // Функция для плавной анимации (замедление в начале и в конце)\n            function easeInOutCubic(t, b, c, d) {\n                t /= d / 2;\n                if (t < 1) return c / 2 * t * t * t + b;\n                t -= 2;\n                return c / 2 * (t * t * t + 2) + b;\n            }\n            // Запускаем анимацию прокрутки\n            requestAnimationFrame(animation);\n        }\n    }\n}\n\n})();\n//# sourceMappingURL=detailing.3aab6bce.js.map\n","// Получаем все ссылки внутри навигации\nconst navLinks = document.querySelectorAll('.nav-menu-list-link');\n\n// Добавляем обработчик события для каждой ссылки\nnavLinks.forEach(link => {\n  link.addEventListener('click', smoothScroll);\n});\n\n// Функция для плавного скролла к секции\nfunction smoothScroll(event) {\n  // Проверяем, является ли ссылка внутренней (якорь на текущую страницу)\n  const isInternalLink = this.getAttribute('href').startsWith('#');\n\n  // Если ссылка внутренняя, отменяем стандартное поведение ссылки и выполняем плавную прокрутку\n  if (isInternalLink) {\n    event.preventDefault();\n\n    const targetId = this.getAttribute('href'); // Получаем атрибут href ссылки (например, \"#about\")\n    const targetSection = document.querySelector(targetId); // Получаем элемент секции по id\n\n    if (targetSection) {\n      const targetPosition = targetSection.getBoundingClientRect().top; // Получаем позицию секции относительно вьюпорта\n      const startPosition = window.pageYOffset; // Текущая позиция скролла\n      const distance = targetPosition - startPosition; // Расстояние, которое нужно прокрутить\n\n      const duration = 1000; // Время анимации в миллисекундах\n      let startTimestamp = null;\n\n      // Функция анимации прокрутки\n      function animation(timestamp) {\n        if (!startTimestamp) startTimestamp = timestamp;\n        const progress = timestamp - startTimestamp;\n\n        window.scrollTo(\n          0,\n          easeInOutCubic(progress, startPosition, distance, duration)\n        );\n\n        if (progress < duration) {\n          requestAnimationFrame(animation);\n        }\n      }\n\n      // Функция для плавной анимации (замедление в начале и в конце)\n      function easeInOutCubic(t, b, c, d) {\n        t /= d / 2;\n        if (t < 1) return (c / 2) * t * t * t + b;\n        t -= 2;\n        return (c / 2) * (t * t * t + 2) + b;\n      }\n\n      // Запускаем анимацию прокрутки\n      requestAnimationFrame(animation);\n    }\n  }\n}\n"],"names":["$dd9e54e108f59881$var$navLinks","document","querySelectorAll","$dd9e54e108f59881$var$smoothScroll","event","isInternalLink","getAttribute","startsWith","preventDefault","targetId","targetSection","querySelector","targetPosition","getBoundingClientRect","top","startPosition","window","pageYOffset","distance","startTimestamp","requestAnimationFrame","animation","timestamp","t","progress","scrollTo","d","c","forEach","link","addEventListener"],"version":3,"file":"detailing.3aab6bce.js.map"}